<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.ssafit.model.dao.UserDao">
	<resultMap type="user" id="userMap">
		<id column="id" property="id" />
		<result column="image_id" property="imageId" />
		<result column="login_id" property="loginId" />
		<result column="login_pw" property="loginPw" />
		<result column="nickname" property="nickname" />
		<result column="email" property="email" />
		<result column="gender" property="gender" />
		<result column="age" property="age" />
		<result column="role" property="role" />
		<result column="created_at" property="createdAt" />
	</resultMap>

	<insert id="insertUser" parameterType="java.util.HashMap">
		INSERT INTO user
		(`image_id`, `login_id`, `login_pw`, `nickname`,
		`email`, `gender`,`age`, `role`)
		VALUES
		(#{imageId}, #{loginId},
		#{loginPw}, #{nickname}, #{email}, #{gender}, #{age}, #{role})
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<update id="updateUser" parameterType="user">
		UPDATE user SET
		image_id = #{imageId}, login_pw = #{loginPw}, nickname = #{nickname},
		email = #{email}, gender = #{gender}, age = #{age}, role = #{role}
		WHERE id
		= #{id}
	</update>

	<select id="selectByLoginId" resultMap="userMap"
		parameterType="string">
		SELECT `id`, `image_id`, `login_id`, `login_pw`, `nickname`, `email`,
		`gender`,`age`, `role`, date_format(created_at, '%Y년%m월%d일 %H시%i분%s초')
		as created_at
		FROM user WHERE login_id = #{loginId}
	</select>

	<delete id="deleteUser" parameterType="int">
		DELETE FROM user WHERE id = #{id}
	</delete>

	<select id="selectById" resultMap="userMap" parameterType="int">
		SELECT `id`, `image_id`, `login_id`, `login_pw`, `nickname`, `email`,
		`gender`,`age`, `role`, date_format(created_at, '%Y년%m월%d일 %H시%i분%s초')
		as created_at
		FROM user WHERE id = #{id}
	</select>

	<select id="selectUserList" resultMap="userMap">
		SELECT `id`, `image_id`, `login_id`, `login_pw`, `nickname`, `email`,
		`gender`,`age`, `role`, date_format(created_at, '%Y년%m월%d일 %H시%i분%s초')
		as created_at
		FROM user
	</select>
	
	<select id="selectSearchUserList" resultMap="userMap" parameterType="java.util.HashMap">
		SELECT `id`, `image_id`, `login_id`, `login_pw`, `nickname`, `email`,
		`gender`,`age`, `role`, date_format(created_at, '%Y년%m월%d일 %H시%i분%s초')
		as created_at
		FROM user
		<if test="mode == 1">
			WHERE login_id LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="mode == 2">
			WHERE nickname LIKE '%${keyword}%'
		</if>
		<if test="mode == 3">
			WHERE nickname LIKE CONCAT('%', #{keyword}, '%')
			OR login_id LIKE
			'%${keyword}%'
		</if>
		ORDER BY created_at DESC
	</select>

	<select id="selectFollowingList" resultMap="userMap"
		parameterType="int">
		SELECT `id`, `image_id`, `login_id`, `login_pw`, `nickname`, `email`,
		`gender`,`age`, `role`, date_format(created_at, '%Y년%m월%d일 %H시%i분%s초')
		as created_at
		FROM user WHERE user.id IN (SELECT follow_id
		FROM relationship
		WHERE user_id = #{id})
	</select>

	<select id="selectFollowerList" resultMap="userMap"
		parameterType="int">
		SELECT `id`, `image_id`, `login_id`, `login_pw`, `nickname`, `email`,
		`gender`,`age`, `role`, date_format(created_at, '%Y년%m월%d일 %H시%i분%s초')
		as created_at
		FROM user WHERE user.id IN (SELECT user_id
		FROM relationship
		WHERE follow_id = #{id})
	</select>
</mapper>

